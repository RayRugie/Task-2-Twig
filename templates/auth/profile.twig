{% extends "base.twig" %}

{% block title %}My Profile - {{ app_name }}{% endblock %}

{% block content %}
<div class="row">
    <div class="col-lg-8">
        <div class="card shadow">
            <div class="card-header">
                <h4 class="mb-0">
                    <i class="bi bi-person-circle me-2"></i>My Profile
                </h4>
            </div>
            <div class="card-body">
                <form method="POST" action="/profile/update" id="profileForm" novalidate>
                    <input type="hidden" name="{{ csrf_token_name }}" value="{{ csrf_token }}">
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="first_name" class="form-label">First Name</label>
                                <input 
                                    type="text" 
                                    class="form-control" 
                                    id="first_name" 
                                    name="first_name" 
                                    value="{{ form_data.first_name|default(user.first_name) }}"
                                    required
                                >
                                <div class="invalid-feedback" id="first_name-error"></div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="last_name" class="form-label">Last Name</label>
                                <input 
                                    type="text" 
                                    class="form-control" 
                                    id="last_name" 
                                    name="last_name" 
                                    value="{{ form_data.last_name|default(user.last_name) }}"
                                    required
                                >
                                <div class="invalid-feedback" id="last_name-error"></div>
                            </div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Email Address</label>
                        <input 
                            type="email" 
                            class="form-control" 
                            id="email" 
                            name="email" 
                            value="{{ form_data.email|default(user.email) }}"
                            required
                        >
                        <div class="invalid-feedback" id="email-error"></div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Username</label>
                        <input 
                            type="text" 
                            class="form-control" 
                            value="{{ user.username }}"
                            readonly
                        >
                        <div class="form-text">Username cannot be changed</div>
                    </div>

                    <hr class="my-4">

                    <h5 class="mb-3">Change Password</h5>
                    <p class="text-muted small">Leave blank to keep current password</p>

                    <div class="mb-3">
                        <label for="current_password" class="form-label">Current Password</label>
                        <input 
                            type="password" 
                            class="form-control" 
                            id="current_password" 
                            name="current_password"
                        >
                        <div class="invalid-feedback" id="current_password-error"></div>
                    </div>

                    <div class="mb-3">
                        <label for="new_password" class="form-label">New Password</label>
                        <input 
                            type="password" 
                            class="form-control" 
                            id="new_password" 
                            name="new_password"
                        >
                        <div class="invalid-feedback" id="new_password-error"></div>
                        <div class="form-text">
                            Password must be at least 8 characters with uppercase, lowercase, and numbers
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="confirm_password" class="form-label">Confirm New Password</label>
                        <input 
                            type="password" 
                            class="form-control" 
                            id="confirm_password" 
                            name="confirm_password"
                        >
                        <div class="invalid-feedback" id="confirm_password-error"></div>
                    </div>

                    <button type="submit" class="btn btn-primary" id="submitBtn">
                        <i class="bi bi-check-circle me-2"></i>Update Profile
                    </button>
                </form>
            </div>
        </div>
    </div>
    
    <div class="col-lg-4">
        <div class="card shadow">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="bi bi-info-circle me-2"></i>Account Information
                </h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label fw-bold">Role</label>
                    <div>
                        <span class="badge bg-{{ user.role == 'admin' ? 'danger' : 'primary' }}">
                            {{ user.role|title }}
                        </span>
                    </div>
                </div>
                
                <div class="mb-3">
                    <label class="form-label fw-bold">Member Since</label>
                    <div class="text-muted">
                        <i class="bi bi-calendar me-1"></i>
                        {{ "now"|date("F j, Y") }}
                    </div>
                </div>
                
                <div class="mb-3">
                    <label class="form-label fw-bold">Account Status</label>
                    <div>
                        <span class="badge bg-success">
                            <i class="bi bi-check-circle me-1"></i>Active
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="card shadow mt-3">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="bi bi-shield-check me-2"></i>Security Tips
                </h5>
            </div>
            <div class="card-body">
                <ul class="list-unstyled mb-0">
                    <li class="mb-2">
                        <i class="bi bi-check-circle text-success me-2"></i>
                        Use a strong, unique password
                    </li>
                    <li class="mb-2">
                        <i class="bi bi-check-circle text-success me-2"></i>
                        Keep your email address updated
                    </li>
                    <li class="mb-2">
                        <i class="bi bi-check-circle text-success me-2"></i>
                        Log out from shared computers
                    </li>
                    <li>
                        <i class="bi bi-check-circle text-success me-2"></i>
                        Report suspicious activity
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('profileForm');
    const submitBtn = document.getElementById('submitBtn');
    const currentPasswordInput = document.getElementById('current_password');
    const newPasswordInput = document.getElementById('new_password');
    const confirmPasswordInput = document.getElementById('confirm_password');

    // Real-time password confirmation validation
    confirmPasswordInput.addEventListener('input', function() {
        const newPassword = newPasswordInput.value;
        const confirmPassword = this.value;
        
        if (confirmPassword && newPassword !== confirmPassword) {
            this.classList.add('is-invalid');
            document.getElementById('confirm_password-error').textContent = 'Passwords do not match';
        } else {
            this.classList.remove('is-invalid');
            document.getElementById('confirm_password-error').textContent = '';
        }
    });

    // Form validation
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Clear previous errors
        clearErrors();
        
        let isValid = true;
        
        // Validate first name
        const firstName = document.getElementById('first_name').value.trim();
        if (!firstName) {
            showError('first_name', 'First name is required');
            isValid = false;
        }
        
        // Validate last name
        const lastName = document.getElementById('last_name').value.trim();
        if (!lastName) {
            showError('last_name', 'Last name is required');
            isValid = false;
        }
        
        // Validate email
        const email = document.getElementById('email').value.trim();
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!email) {
            showError('email', 'Email is required');
            isValid = false;
        } else if (!emailRegex.test(email)) {
            showError('email', 'Please enter a valid email address');
            isValid = false;
        }
        
        // Validate password change if any password field is filled
        const currentPassword = currentPasswordInput.value;
        const newPassword = newPasswordInput.value;
        const confirmPassword = confirmPasswordInput.value;
        
        if (currentPassword || newPassword || confirmPassword) {
            if (!currentPassword) {
                showError('current_password', 'Current password is required to change password');
                isValid = false;
            }
            
            if (!newPassword) {
                showError('new_password', 'New password is required');
                isValid = false;
            } else if (newPassword.length < 8) {
                showError('new_password', 'Password must be at least 8 characters');
                isValid = false;
            } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(newPassword)) {
                showError('new_password', 'Password must contain uppercase, lowercase, and numbers');
                isValid = false;
            }
            
            if (!confirmPassword) {
                showError('confirm_password', 'Please confirm your new password');
                isValid = false;
            } else if (newPassword !== confirmPassword) {
                showError('confirm_password', 'Passwords do not match');
                isValid = false;
            }
        }
        
        if (isValid) {
            // Show loading state
            submitBtn.innerHTML = '<i class="bi bi-hourglass-split me-2"></i>Updating...';
            submitBtn.disabled = true;
            
            // Submit form
            form.submit();
        }
    });

    function showError(field, message) {
        const input = document.getElementById(field);
        const errorDiv = document.getElementById(field + '-error');
        
        input.classList.add('is-invalid');
        errorDiv.textContent = message;
    }

    function clearErrors() {
        const inputs = form.querySelectorAll('.form-control');
        inputs.forEach(input => {
            input.classList.remove('is-invalid');
        });
        
        const errorDivs = form.querySelectorAll('.invalid-feedback');
        errorDivs.forEach(div => {
            div.textContent = '';
        });
    }
});
</script>
{% endblock %}
